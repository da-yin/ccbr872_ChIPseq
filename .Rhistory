mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
p3
pdf("unsupervised_clustering.pdf")
print(p3)
dev.off()
pdf("Heatmap_unsupervised_clustering.pdf")
print(p3)
print(p3)
dev.off()
pdf("Heatmap_unsupervised_clustering.pdf")
print(p3)
dev.off()
pdf("Heatmap_unsupervised_clustering_500Genes.pdf")
print(p3)
dev.off()
var_genes  = apply(so_ave$integrated, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:200]
so_ave_select = so_ave$integrated[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
pdf("Heatmap_unsupervised_clustering_200Genes.pdf")
print(p3)
dev.off()
var_genes  = apply(so_ave$integrated, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:1000]
so_ave_select = so_ave$integrated[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
pdf("Heatmap_unsupervised_clustering_1000Genes.pdf")
print(p3)
dev.off()
mySeuratPlot = function(genes){
DefaultAssay(so.integrated) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so.integrated, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so.integrated, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 18, height = 14)
print(p2)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p3)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
mySeuratPlot = function(genes){
DefaultAssay(so.integrated) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so.integrated, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so.integrated, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12)
print(p2)
dev.off()
p3 = DotPlot(so.integrated, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 14, height = 16)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
p4 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p4)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
mySeuratPlot = function(genes){
DefaultAssay(so.integrated) = "RNA"
name = deparse(substitute(genes))
p1 = VlnPlot(so.integrated, features = genes, pt.size = 0.001)+NoLegend()
pdf(paste0("VlnPlot_", name, ".pdf"), width = 18, height = 14)
print(p1)
dev.off()
p2 = FeaturePlot(so.integrated, features = genes, reduction = "tsne")
pdf(paste0("FeaturePlot_", name, ".pdf"), width = 12, height = 12)
print(p2)
dev.off()
p3 = DotPlot(so.integrated, features = genes) + RotatedAxis()
pdf(paste0("DotPlot_", name, ".pdf"), width = 9, height = 9)
print(p3)
dev.off()
mat = so_ave$integrated[which(rownames(so_ave$integrated)%in%genes),]
p4 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(8, "cm"),
column_title = name)
pdf(paste0("Heatmap_", name, ".pdf"), width = 10, height = 10)
print(p4)
dev.off()
}
mySeuratPlot(genes = TCR_components)
mySeuratPlot(genes = CoReceptors_CoSignalingMolecules)
mySeuratPlot(genes = cytokineReceptors_chemokineReceptors)
mySeuratPlot(genes = adhesionMolecules_guidanceMolecules)
mySeuratPlot(genes = otherSurfaceMolecules)
mySeuratPlot(genes = signalMolecules)
mySeuratPlot(genes = transcriptionFactors)
mySeuratPlot(genes = otherMolecules)
annotations = c("sample_name")
for (i in annotations){
DimPlot(so.integrated, reduction = "tsne", group.by = i)
}
DimPlot(so.integrated, reduction = "tsne", group.by = "sample_name")
DimPlot(so.integrated, reduction = "tsne", group.by = "hash.ID")
annotations = c("sample_name","hash.ID")
for (i in annotations){
DimPlot(so.integrated, reduction = "tsne", group.by = i)
}
annotations = c("sample_name","hash.ID")
for (i in annotations){
plot = DimPlot(so.integrated, reduction = "tsne", group.by = i)
pdf(paste0("DimPlot", i, ".pdf"))
print(plot)
dev.off()
}
so.integrated@meta.data
var_genes  = apply(so_ave$RNA, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:1000]
so_ave_select = so_ave$RNA[select_var,]
mat = so_ave_select
p3 =
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T ,column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(10, "cm"),
column_title = "")
pdf("Heatmap_unsupervised_clustering_1000Genes_withoutBatchCorrection.pdf")
print(p3)
dev.off()
saveRDS(object = so.integrated, file = "~/Desktop/active_projects/seuratObject/ccbr1040_noDoublet_SeuratStandardBatchCorrected.5.20.2020.rds")
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
data_path = './data/'
file_suffix = '.intersummit_distance.txt'
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intersummit Distance"),
tags$head(
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/jQuery.print/1.6.0/jQuery.print.min.js")
),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("gene1", "gene1", "Hnf1b"),
textInput("gene2", "gene2", "Chd1"),
textInput("gene3", "gene3", "Mafa"),
textInput("gene4", "gene4", "Mllt3"),
br(),
actionButton("boxplotButton", "Generate Boxplots"),
br(),
br(),
actionButton("densityButton", "Generate Density Plot"),
br(),
br(),
actionButton("ksButton", "Kolmogorov-Smirnov test"),
br(),
br(),
actionButton("print", "Print", onclick = "$('#textarea').print();")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("boxplots"),
plotOutput("densityplots"),
verbatimTextOutput("ksTest")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
get_genes <- eventReactive(input$boxplotButton, {
# Validation. All 4 genes must be typed
# It also validates if the files exist and they're readable
validate(
need(input$gene1 != "", "Please type a valid gene 1"),
need(input$gene2 != "", "Please type a valid gene 2"),
need(input$gene3 != "", "Please type a valid gene 3"),
need(input$gene4 != "", "Please type a valid gene 4"),
need(try(read.table(paste0(data_path, input$gene1,'_', input$gene2, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2)),
need(try(read.table(paste0(data_path, input$gene3,'_', input$gene4, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2))
)
c(input$gene1, input$gene2, input$gene3, input$gene4)
})
get_genes_density <- eventReactive(input$densityButton, {
# Validation. All 4 genes must be typed
# It also validates if the files exist and they're readable
validate(
need(input$gene1 != "", "Please type a valid gene 1"),
need(input$gene2 != "", "Please type a valid gene 2"),
need(input$gene3 != "", "Please type a valid gene 3"),
need(input$gene4 != "", "Please type a valid gene 4"),
need(try(read.table(paste0(data_path, input$gene1,'_', input$gene2, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2)),
need(try(read.table(paste0(data_path, input$gene3,'_', input$gene4, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2))
)
c(input$gene1, input$gene2, input$gene3, input$gene4)
})
get_genes_ks <- eventReactive(input$ksButton, {
# Validation. All 4 genes must be typed
# It also validates if the files exist and they're readable
validate(
need(input$gene1 != "", "Please type a valid gene 1"),
need(input$gene2 != "", "Please type a valid gene 2"),
need(input$gene3 != "", "Please type a valid gene 3"),
need(input$gene4 != "", "Please type a valid gene 4"),
need(try(read.table(paste0(data_path, input$gene1,'_', input$gene2, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2)),
need(try(read.table(paste0(data_path, input$gene3,'_', input$gene4, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2))
)
c(input$gene1, input$gene2, input$gene3, input$gene4)
})
output$boxplots <- renderPlot({
genes = get_genes()
file1 = paste0(data_path, genes[1],'_', genes[2], file_suffix)
file2 = paste0(data_path, genes[3],'_', genes[4], file_suffix)
data1 <- read.table(file1, sep='\t', header=FALSE)
abs_data1 = log2(abs(data1[3]))
data2 <- read.table(file2, sep='\t', header=FALSE)
abs_data2 = log2(abs(data2[3]))
# Replace -Inf caused by log-zero values
abs_data1[mapply(is.infinite, abs_data1)] = 0
abs_data2[mapply(is.infinite, abs_data2)] = 0
abs_data1['pair'] = paste0(genes[1],'_', genes[2])
abs_data2['pair'] = paste0(genes[3],'_', genes[4])
df_both = data.frame(matrix(ncol = 2, nrow = length(abs_data1) + length(abs_data2)))
df_both = rbind(abs_data1, abs_data2)
# Set same y limits to ease comparison
# lmts <- range(abs_data1, abs_data2)
#
# par(mfrow = c(1, 2))
# boxplot(abs_data1, ylim=lmts, main = paste0(genes[1],'_', genes[2]))
# boxplot(abs_data2, ylim=lmts, main = paste0(genes[3],'_', genes[4]))
boxplot(V3~pair,data=df_both, main="Intersummit Distance Boxplots (log2)", ylab = 'log distance')
})
output$densityplots <- renderPlot({
genes = get_genes_density()
file1 = paste0(data_path, genes[1],'_', genes[2], file_suffix)
file2 = paste0(data_path, genes[3],'_', genes[4], file_suffix)
data1 <- read.table(file1, sep='\t', header=FALSE)
abs_data1 = log2(abs(data1[3]))
data2 <- read.table(file2, sep='\t', header=FALSE)
abs_data2 = log2(abs(data2[3]))
# Replace -Inf caused by log-zero values
abs_data1[mapply(is.infinite, abs_data1)] = 0
abs_data2[mapply(is.infinite, abs_data2)] = 0
# Set same y limits to ease comparison
#par(mfrow = c(1, 2))
d1 = density(unlist(abs_data1))
d2 = density(unlist(abs_data2))
plot(d1, main = "Intersummit Distance Density Plots (log2)", ylab = 'log distance',  ylim = c(0, 0.3))
lines(d2, ylab = 'log distance', col = "blue", ylim = c(0, 0.3))
legend("topleft",
legend=c(paste0(genes[1],'_', genes[2]), paste0(genes[3],'_', genes[4])),
pch = c(17,19),
col=c("black", "blue")
)
})
output$ksTest <- renderPrint({
genes = get_genes_ks()
file1 = paste0(data_path, genes[1],'_', genes[2], file_suffix)
file2 = paste0(data_path, genes[3],'_', genes[4], file_suffix)
data1 <- read.table(file1, sep='\t', header=FALSE)
abs_data1 = log2(abs(data1[3]))
data2 <- read.table(file2, sep='\t', header=FALSE)
abs_data2 = log2(abs(data2[3]))
# Replace -Inf caused by log-zero values
abs_data1[mapply(is.infinite, abs_data1)] = 0
abs_data2[mapply(is.infinite, abs_data2)] = 0
# ks = ks.test(unlist(data1[3]), unlist(data2[3]))
ks = ks.test(unlist(abs_data1), unlist(abs_data2))
ks
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
#data_path = './data/'
data_path = '~/Desktop/active_projects/ccbr1234-shiny/rawData/'
file_suffix = '.intersummit_distance.txt'
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intersummit Distance"),
tags$head(
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/jQuery.print/1.6.0/jQuery.print.min.js")
),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("gene1", "gene1", "Hnf1b"),
textInput("gene2", "gene2", "Chd1"),
textInput("gene3", "gene3", "Mafa"),
textInput("gene4", "gene4", "Mllt3"),
br(),
actionButton("boxplotButton", "Generate Boxplots"),
br(),
br(),
actionButton("densityButton", "Generate Density Plot"),
br(),
br(),
actionButton("ksButton", "Kolmogorov-Smirnov test"),
br(),
br(),
actionButton("print", "Print", onclick = "$('#textarea').print();")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("boxplots"),
plotOutput("densityplots"),
verbatimTextOutput("ksTest")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
get_genes <- eventReactive(input$boxplotButton, {
# Validation. All 4 genes must be typed
# It also validates if the files exist and they're readable
validate(
need(input$gene1 != "", "Please type a valid gene 1"),
need(input$gene2 != "", "Please type a valid gene 2"),
need(input$gene3 != "", "Please type a valid gene 3"),
need(input$gene4 != "", "Please type a valid gene 4"),
need(try(read.table(paste0(data_path, input$gene1,'_', input$gene2, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2)),
need(try(read.table(paste0(data_path, input$gene3,'_', input$gene4, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2))
)
c(input$gene1, input$gene2, input$gene3, input$gene4)
})
get_genes_density <- eventReactive(input$densityButton, {
# Validation. All 4 genes must be typed
# It also validates if the files exist and they're readable
validate(
need(input$gene1 != "", "Please type a valid gene 1"),
need(input$gene2 != "", "Please type a valid gene 2"),
need(input$gene3 != "", "Please type a valid gene 3"),
need(input$gene4 != "", "Please type a valid gene 4"),
need(try(read.table(paste0(data_path, input$gene1,'_', input$gene2, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2)),
need(try(read.table(paste0(data_path, input$gene3,'_', input$gene4, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2))
)
c(input$gene1, input$gene2, input$gene3, input$gene4)
})
get_genes_ks <- eventReactive(input$ksButton, {
# Validation. All 4 genes must be typed
# It also validates if the files exist and they're readable
validate(
need(input$gene1 != "", "Please type a valid gene 1"),
need(input$gene2 != "", "Please type a valid gene 2"),
need(input$gene3 != "", "Please type a valid gene 3"),
need(input$gene4 != "", "Please type a valid gene 4"),
need(try(read.table(paste0(data_path, input$gene1,'_', input$gene2, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2)),
need(try(read.table(paste0(data_path, input$gene3,'_', input$gene4, file_suffix), sep='\t', header=FALSE)),
paste0("There is no file for the pair ", input$gene1, ' and ', input$gene2))
)
c(input$gene1, input$gene2, input$gene3, input$gene4)
})
output$boxplots <- renderPlot({
genes = get_genes()
file1 = paste0(data_path, genes[1],'_', genes[2], file_suffix)
file2 = paste0(data_path, genes[3],'_', genes[4], file_suffix)
data1 <- read.table(file1, sep='\t', header=FALSE)
abs_data1 = log2(abs(data1[3]))
data2 <- read.table(file2, sep='\t', header=FALSE)
abs_data2 = log2(abs(data2[3]))
# Replace -Inf caused by log-zero values
abs_data1[mapply(is.infinite, abs_data1)] = 0
abs_data2[mapply(is.infinite, abs_data2)] = 0
abs_data1['pair'] = paste0(genes[1],'_', genes[2])
abs_data2['pair'] = paste0(genes[3],'_', genes[4])
df_both = data.frame(matrix(ncol = 2, nrow = length(abs_data1) + length(abs_data2)))
df_both = rbind(abs_data1, abs_data2)
# Set same y limits to ease comparison
# lmts <- range(abs_data1, abs_data2)
#
# par(mfrow = c(1, 2))
# boxplot(abs_data1, ylim=lmts, main = paste0(genes[1],'_', genes[2]))
# boxplot(abs_data2, ylim=lmts, main = paste0(genes[3],'_', genes[4]))
boxplot(V3~pair,data=df_both, main="Intersummit Distance Boxplots (log2)", ylab = 'log distance')
})
output$densityplots <- renderPlot({
genes = get_genes_density()
file1 = paste0(data_path, genes[1],'_', genes[2], file_suffix)
file2 = paste0(data_path, genes[3],'_', genes[4], file_suffix)
data1 <- read.table(file1, sep='\t', header=FALSE)
abs_data1 = log2(abs(data1[3]))
data2 <- read.table(file2, sep='\t', header=FALSE)
abs_data2 = log2(abs(data2[3]))
# Replace -Inf caused by log-zero values
abs_data1[mapply(is.infinite, abs_data1)] = 0
abs_data2[mapply(is.infinite, abs_data2)] = 0
# Set same y limits to ease comparison
#par(mfrow = c(1, 2))
d1 = density(unlist(abs_data1))
d2 = density(unlist(abs_data2))
plot(d1, main = "Intersummit Distance Density Plots (log2)", ylab = 'log distance',  ylim = c(0, 0.3))
lines(d2, ylab = 'log distance', col = "blue", ylim = c(0, 0.3))
legend("topleft",
legend=c(paste0(genes[1],'_', genes[2]), paste0(genes[3],'_', genes[4])),
pch = c(17,19),
col=c("black", "blue")
)
})
output$ksTest <- renderPrint({
genes = get_genes_ks()
file1 = paste0(data_path, genes[1],'_', genes[2], file_suffix)
file2 = paste0(data_path, genes[3],'_', genes[4], file_suffix)
data1 <- read.table(file1, sep='\t', header=FALSE)
abs_data1 = log2(abs(data1[3]))
data2 <- read.table(file2, sep='\t', header=FALSE)
abs_data2 = log2(abs(data2[3]))
# Replace -Inf caused by log-zero values
abs_data1[mapply(is.infinite, abs_data1)] = 0
abs_data2[mapply(is.infinite, abs_data2)] = 0
# ks = ks.test(unlist(data1[3]), unlist(data2[3]))
ks = ks.test(unlist(abs_data1), unlist(abs_data2))
ks
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Desktop/active_projects/ccbr1234-shiny/rawData')
runApp('Desktop/active_projects/ccbr872_ChIPseq/analysis/interSummit_plotter.R')
runApp('Desktop/active_projects/ccbr872_ChIPseq/analysis/interSummit_plotter.R')
runApp('Desktop/active_projects/ccbr872_ChIPseq/interSummit_plotter.R')
